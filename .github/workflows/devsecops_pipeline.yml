name: NC ACADEMY DEVSECOPS PIPELINE

on:
  push:
    branches:
      - development
      - production
  repository_dispatch:
    types: [deploy-production]


jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.x'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.TF_VAR_AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'false'

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ncacademy_website
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t ncacademy_website -f ./ncacademy_website/Dockerfile .
        docker tag ncacademy_website:latest 179682925980.dkr.ecr.us-east-1.amazonaws.com/ncacademy_website
        docker push 179682925980.dkr.ecr.us-east-1.amazonaws.com/ncacademy_website

  test:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
    steps:
    - name: Run Tests
      run: echo "Running tests"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.TF_VAR_AWS_REGION }}

    - name: Set Environment Variable
      run: echo "TF_ENV=${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}" >> $GITHUB_ENV

    - name: Initialize Terraform
      run: terraform init -var="environment=${{ env.TF_ENV }}"
      working-directory: ./ncacademy_website
      
    - name: Select Terraform Workspace
      run: terraform workspace select ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
      working-directory: ./ncacademy_website

    - name: Apply Terraform for Website
      run: terraform apply -auto-approve
      working-directory: ./ncacademy_website
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}
        TF_VAR_CLOUDFLARE_API_KEY: ${{ secrets.TF_VAR_CLOUDFLARE_API_KEY }}
        TF_VAR_CLOUDFLARE_EMAIL: ${{ secrets.TF_VAR_CLOUDFLARE_EMAIL }}
        TF_VAR_SITE_DOMAIN: ${{ secrets.TF_VAR_SITE_DOMAIN }}

  promote-to-production:
    needs: deploy
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/development'
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'development'
          fetch-depth: 0 
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Merge development into production
        run: |
          git checkout production
          git merge development --no-edit
          git push origin production