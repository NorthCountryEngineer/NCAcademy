name: NC ACADEMY DEVSECOPS PIPELINE

on:
  push:
    branches:
      - development
      - production
  repository_dispatch:
    types: [deploy-production]

env:
  ECR_REPO_NAME: ""
  TF_ENV: ""
  TERRAFORM_ROOT: ./terraform
  NODE_VERSION: 18
  DOCKER_ENV: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}
  TF_VAR_docker_image_tag: ${{ github.sha }}

jobs:
  pre-build:
    name: Provision ECR
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@master

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./ncacademy_website/terraform

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ./ncacademy_website/terraform

    - name: Terraform Plan
      id: plan
      working-directory: ./ncacademy_website/terraform
      run: |
        terraform plan -target=module.app_infra.aws_ecr_repository.application_ecr_repo -out ./app.out
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}
        TF_VAR_CLOUDFLARE_API_KEY: ${{ secrets.TF_VAR_CLOUDFLARE_API_KEY }}
        TF_VAR_CLOUDFLARE_EMAIL: ${{ secrets.TF_VAR_CLOUDFLARE_EMAIL }}
        TF_VAR_SITE_DOMAIN: ${{ secrets.TF_VAR_SITE_DOMAIN }}

    - name: Create ECR repo
      id: apply
      working-directory: ./ncacademy_website/terraform
      run: terraform apply -auto-approve ./app.out
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}
        TF_VAR_CLOUDFLARE_API_KEY: ${{ secrets.TF_VAR_CLOUDFLARE_API_KEY }}
        TF_VAR_CLOUDFLARE_EMAIL: ${{ secrets.TF_VAR_CLOUDFLARE_EMAIL }}
        TF_VAR_SITE_DOMAIN: ${{ secrets.TF_VAR_SITE_DOMAIN }}

  build:
    name: Build Next Application
    needs: pre-build
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.8
        terraform_wrapper: false

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./ncacademy_website/terraform
      
    - name: Select Terraform Workspace
      run: terraform workspace select -or-create ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }} 
      working-directory: ./ncacademy_website/terraform

    - name: Output terraform variables to file
      id: output
      working-directory: ./ncacademy_website/terraform
      run: |
        terraform output -json > ../../terraform-outputs.json
    
    - name: Set variables from Terraform Outputs
      run: |
        outputs=$(cat terraform-outputs.json)

        ecr_repo_name=$(echo $outputs | jq -r .ecr_repo_name.value)
        echo "ECR_REPO_NAME=$ecr_repo_name" >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2


    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
        IMAGE_TAG: ${{ env.TF_VAR_docker_image_tag }}
      run: |
        docker build \
        --build-arg NODE_ENV=${{ env.DOCKER_ENV }} \
        -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  test:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
    steps:
    - name: Run Tests
      run: echo "Running tests"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@master

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.TF_VAR_AWS_REGION }}

    - name: Set Environment Variable
      run: echo "TF_ENV=${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./ncacademy_website/terraform

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ${{env.TERRAFORM_ROOT}}

    - name: Terraform Plan
      id: plan
      working-directory: ${{env.TERRAFORM_ROOT}}
      run: |
        terraform plan \
        -out ./app.out
    
    - name: Apply Terraform for Website
      run: terraform apply -auto-approve ./app.out
      working-directory: ./ncacademy_website/terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_AWS_REGION: ${{ secrets.TF_VAR_AWS_REGION }}
        TF_VAR_CLOUDFLARE_API_KEY: ${{ secrets.TF_VAR_CLOUDFLARE_API_KEY }}
        TF_VAR_CLOUDFLARE_EMAIL: ${{ secrets.TF_VAR_CLOUDFLARE_EMAIL }}
        TF_VAR_SITE_DOMAIN: ${{ secrets.TF_VAR_SITE_DOMAIN }}

  promote-to-production:
    needs: deploy
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/development'
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'development'
          fetch-depth: 0 
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Merge development into production
        run: |
          git checkout production
          git merge development --no-edit
          git push origin production